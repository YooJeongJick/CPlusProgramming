클래스에서 가장 중요한 친구, 인터페이스
클래스 설계 시 가장 우선!
클래스의 책임은 인터페이스로부터

개념을 코드로 적용시키는 것이 어려운 객체지향!
왕도는 연습

인터페이스를 만족하기 위한 여러가지 상태를 생성
상태와 인터페이스를 연결시키는 알고리즘 완성!

원소는 클라이언트가 추가
서버는 몰랑이
코드를 클라이언트 위주로 작성해야 함


객체 지향의 특성
1) 캡슐화
2) 상속
3) 다형성

1. 캡슐화
2가지로 나타난다!

정적(속성)
동적(메소드)
이와 관련성 있는 것을 클래스라는 단위로 묶는 개념

private
public 
문법 키워드로 표현
보호 개념

2. 상속
컴퓨터 프로그램
사람들을 위해 존재
따라서 사람의 문제와 떨어질 수 없음

클래스 객체의 공통된 개념 정의
이는 추상화를 통해 추출!

쩝쩝찝찝쩝쩝

상위 개념과 하위 개념
득득(긁긁?)

개념들은 모두 계층구조를 갖는다
나보다 더 추상화!
나보다 더 구체화!

사람들 세계에서의 개념~
컴퓨터의 클래스로 표현

따라서 클래스도 계층구조를 가진다.

득득

생산성을 높이는 방법
인터페이스와 추상화 중심으로
구체적으로 정의하면 추후에 많은 수정을 요함

상속이란?
상위 클래스의 개념을
하위 클래스가 물려받는 것
반대는 파생

상속은 개념간의 계층구조를 이룰 때만 가능

protected
계층구조 내에서만 사용 가능
보통 부모 클래스 내 private 속성을 이것으로 정의















